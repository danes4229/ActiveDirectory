
 $Result = @(); $Result += [PSCustomObject]@{"Grupo"="administrators";"Cantidad de usuarios"=(Get-ADGroupMember -Identity "administrators" | Where-Object {$_.objectClass -eq "user"}).Count}; $Result += [PSCustomObject]@{"Grupo"="server operators";"Cantidad de usuarios"=(Get-ADGroupMember -Identity "server operators" | Where-Object {$_.objectClass -eq "user"}).Count}; $Result | Export-Csv -Path "C:\Ruta\resultados.csv" -NoTypeInformation

$Result = @(); "administrators","server operators","account operators","domain admins" | ForEach-Object { $Result += [PSCustomObject]@{"Grupo"=$_;"Cantidad de usuarios"=(Get-ADGroupMember -Identity $_ | Where-Object {$_.objectClass -eq "user"}).Count} }; $Result | Export-Csv -Path "C:\Ruta\resultados.csv" -NoTypeInformation

========================================================================================
 Computers accounts with weak encryption type for kerberos

Import-Module ActiveDirectory; $ComputadorasDebiles = (Get-ADComputer -Filter {OperatingSystem -notlike "*Server*"} -Properties 'msDS-SupportedEncryptionTypes' | Where-Object { $_.'msDS-SupportedEncryptionTypes' -notcontains "AES256_CTS_HMAC_SHA1_96" -and $_.'msDS-SupportedEncryptionTypes' -notcontains "AES128_CTS_HMAC_SHA1_96" }).Count; $ComputadorasDebiles | Export-Csv -Path "C:\Ruta\computadoras_debiles.csv" -NoTypeInformation

========================================================================================
 list a Inventory of accounts on servers

# Define the list of server names
$serverNames = "Server1", "Server2"  # Add the names of your servers here

# Create an array to store the results
$results = @()

# Iterate through each server
foreach ($serverName in $serverNames) {
    $serverInventory = [PSCustomObject]@{
        "ServerName" = $serverName
        "WindowsServers" = 0
        "DomainAccounts" = 0
        "LocalAccounts" = 0
        "Groups" = 0
    }

    # Query local and domain accounts and groups on the server
    $serverInventory."WindowsServers" = (Get-WmiObject -Class Win32_OperatingSystem -ComputerName $serverName).Name -match "Windows Server"
    $serverInventory."DomainAccounts" = (Get-WmiObject -Class Win32_UserAccount -ComputerName $serverName | Where-Object { $_.LocalAccount -eq $false }).Count
    $serverInventory."LocalAccounts" = (Get-WmiObject -Class Win32_UserAccount -ComputerName $serverName | Where-Object { $_.LocalAccount -eq $true }).Count
    $serverInventory."Groups" = (Get-WmiObject -Class Win32_Group -ComputerName $serverName | Where-Object { $_.LocalAccount -eq $false }).Count

    # Add the server's inventory to the results array
    $results += $serverInventory
}

# Export the results to a CSV file
$results | Export-Csv -Path "ServerInventory.csv" -NoTypeInformation


========================================================================================

listar de todas las cuentas de administrador que tienen un Service Principal Name (SPN) en Active Directory. 

$spnFilter = "*/" 

# Obtiene todas las cuentas de administrador
$adminAccounts = Get-ADUser -Filter {Enabled -eq $true -and MemberOf -like "*Administrators*"} -Properties ServicePrincipalName

# Filtra las cuentas de administrador que tienen SPN
$adminAccountsWithSPN = $adminAccounts | Where-Object { $_.ServicePrincipalName -like $spnFilter }

# Muestra la lista de cuentas de administrador con SPN
$adminAccountsWithSPN | Select-Object Name, SamAccountName, ServicePrincipalName

========================================================================================
Número de "Service Accounts" y "Managed Service Accounts" en Active Directory


# Contar el número de "Service Accounts" y "Managed Service Accounts"
$serviceAccountsCount = (Get-ADUser -Filter {ServicePrincipalName -like '*' -and Enabled -eq $true}).Count
$managedServiceAccountsCount = (Get-ADServiceAccount -Filter *).Count

# Mostrar el resultado
Write-Host "Número de Service Accounts: $serviceAccountsCount"
Write-Host "Número de Managed Service Accounts: $managedServiceAccountsCount"
========================================================================================
If you want to count the number of groups in your Active Directory environment but don't have specific server names, you can use PowerShell to query Active Directory for group objects.

# Import the Active Directory module
Import-Module ActiveDirectory

# Query Active Directory for group objects
$groupCount = (Get-ADGroup -Filter *).Count

# Display the count of groups in Active Directory
Write-Host "Number of groups in Active Directory: $groupCount"
========================================================================================
Si deseas obtener todas las propiedades extendidas de cada usuario de Active Directory
Get-ADUser -Filter * -Properties * | Select-Object -Property * -ExcludeProperty MemberOf | 
    Select-Object *,@{Name="MemberOf";Expression={(Get-ADPrincipalGroupMembership $_).Name -join ', '}} |
    Format-List


 La propiedad llamada "MemberOf" que muestra todos los grupos a los que pertenece cada usuario, utilizando el cmdlet Get-ADPrincipalGroupMembership.


=================================================================================================================
If you want to count the number of domain accounts in your Active Directory environment but don't have specific server names
# Import the Active Directory module
Import-Module ActiveDirectory

# Query Active Directory for domain user accounts
$domainAccountsCount = (Get-ADUser -Filter *).Count

# Display the count of domain user accounts
Write-Host "Number of domain user accounts in Active Directory: $domainAccountsCount"
=================================================================================================================

If you want to count the number of Windows Servers in your Active Directory environment but you don't have specific server names, you can use PowerShell to query the Active Directory for Windows Server computer objects.

# Import the Active Directory module
Import-Module ActiveDirectory

# Query Active Directory for Windows Server computer objects
$windowsServerCount = (Get-ADComputer -Filter {OperatingSystem -like "*Windows Server*"}).Count

# Display the count of Windows Servers
Write-Host "Number of Windows Servers in Active Directory: $windowsServerCount"

=================================================================================================================
To count the number of local accounts on a Windows server, you can use PowerShell to query the server's local user accounts.



# Specify the name of the server
$serverName = "ServerName"  # Replace with the name of your server

# Query local user accounts on the server
$localAccounts = (Get-WmiObject -Class Win32_UserAccount -ComputerName $serverName | Where-Object { $_.LocalAccount -eq $true }).Count

# Display the count of local user accounts
Write-Host "Number of local user accounts on $serverName: $localAccounts"
=================================================================================================================
=================================================================================================================

 todas las Service Account y las Managed Services Accounts

# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de usuario en Active Directory
$TodasLasCuentas = Get-ADUser -Filter *

# Filtrar las cuentas de servicio
$CuentasDeServicio = $TodasLasCuentas | Where-Object {
    $_.UserPrincipalName -like "*$"
}

# Filtrar las cuentas de servicio administradas
$CuentasDeServicioAdministradas = $TodasLasCuentas | Where-Object {
    $_.UserPrincipalName -like "*$"
}

# Mostrar la lista de cuentas de servicio
Write-Host "Cuentas de Servicio:"
$CuentasDeServicio | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

# Mostrar la lista de cuentas de servicio administradas
Write-Host "Cuentas de Servicio Administradas:"
$CuentasDeServicioAdministradas | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

=================================================================================================================
todas las cuentas de servicio en Active Directory
# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de servicio
$CuentasDeServicio = Get-ADUser -Filter {ServicePrincipalName -like '*'} -Properties ServicePrincipalName

# Mostrar la lista de cuentas de servicio
$CuentasDeServicio | Select-Object Name, SamAccountName, DistinguishedName, ServicePrincipalName | Format-Table -AutoSize

=================================================================================================================
Las cuentas de servicio administradas (Managed Service Accounts) 
# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de servicio administradas
$CuentasDeServicioAdministradas = Get-ADServiceAccount -Filter *

# Mostrar la lista de cuentas de servicio administradas
$CuentasDeServicioAdministradas | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize


=================================================================================================================

un comando que te mostrará todas las propiedades de manera extendida para cada usuario en Active Directory:
Get-ADUser -Filter * -Properties * | Select-Object *

Get-ADUser -Filter * -Properties * | Select-Object -Property *,@{Name="MemberOf";Expression={(Get-ADPrincipalGroupMembership $_).Name -join ', '}}

=================================================================================================================

Para mostrar la fecha de la última modificación de la contraseña de krbtgt (que es crucial en la seguridad de Kerberos) por cada usuario en Active Directory, puedes usar el siguiente comando:
Get-ADUser -Filter * -Properties msDS-LastSuccessfulInteractiveLogonTime | Select-Object Name, SamAccountName, DistinguishedName, @{Name='LastKrbtgtPwdChange';Expression={[DateTime]::FromFileTime($_.'msDS-LastSuccessfulInteractiveLogonTime')}} | Format-Table -AutoSize

=================================================================================================================

El siguiente comando para listar todas las cuentas de usuario en Active Directory que no tienen una política de contraseñas definida:
Get-ADUser -Filter * | Where-Object { -not (Get-ADUserResultantPasswordPolicy $_) } | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize


=================================================================================================================

Este comando consulta todos los usuarios de Active Directory y selecciona propiedades específicas, como Nombre, Grupos, Fecha de Creación, Último Inicio de Sesión (convertido a formato de fecha), Control de Cuenta de Usuario, Compañía y Nombre Principal Kerberos (msDS-PrincipalName). 

Get-ADUser -Filter * -Properties Name, MemberOf, whenCreated, lastLogonTimestamp, userAccountControl, company, msDS-PrincipalName | Select-Object Name, @{Name='Groups';Expression={$_.MemberOf -join ', '}}, whenCreated, @{Name='LastLogon';Expression={[DateTime]::FromFileTime($_.lastLogonTimestamp)}}, @{Name='UserType';Expression={
    if ($_.userAccountControl -band 2) {'Normal User'} else {if ($_.userAccountControl -band 16) {'Machine Account'} else {'Unknown'}}
}}, company, msDS-PrincipalName

=================================================================================================================
lista de cuentas de usuario en Active Directory que no tienen una política de contraseñas definida
Get-ADUser -Filter * | Where-Object {-not (Get-ADFineGrainedPasswordPolicy -Filter {AppliesToAccount -like $_.DistinguishedName})} | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

=================================================================================================================

Fecha de la última modificación del objeto KRBTGT
Get-ADObject -Filter {Name -eq "krbtgt"} -Properties uSNChanged

El valor de uSNChanged es un número que representa el momento en que se realizó la última modificación del objeto KRBTGT. Puedes convertir este valor a una fecha legible utilizando el siguiente comando:
$krbtgt = Get-ADObject -Filter {Name -eq "krbtgt"} -Properties uSNChanged
$lastPasswordChange = [datetime]::FromFileTime($krbtgt.uSNChanged)
Write-Host "La última vez que se cambió la contraseña KRBTGT: $lastPasswordChange"

=================================================================================================================
Para obtener una lista de cuentas de administrador en Active Directory que no tengan la política de denegación de inicio de sesión configurada

# Obtener una lista de todas las cuentas de administrador (aquellas con el atributo "adminCount" configurado)
$CuentasAdmin = Get-ADUser -Filter {adminCount -eq 1}

# Filtrar las cuentas de administrador que no tienen una política de denegación de inicio de sesión
$CuentasSinDenegacion = $CuentasAdmin | Where-Object {
    -not (Get-ADUserResultantEffectiveLogonDeny $($_.DistinguishedName))
}

# Mostrar la lista de cuentas de administrador sin política de denegación de inicio de sesión
$CuentasSinDenegacion | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize


=================================================================================================================
Lista de cuentas de administrador en Active Directory que no tienen Service Principal Names (SPN) configurados
Get-ADUser -Filter {adminCount -eq 1} -Properties servicePrincipalName | Where-Object { -not $_.servicePrincipalName } | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

=================================================================================================================

 obtiene todas las cuentas de servicio y luego filtra las cuentas de servicio administradas (Managed Service Accounts) en base a si tienen la propiedad ManagedBy configurada.

# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener todas las cuentas de servicio (Service Accounts)
$ServiceAccounts = Get-ADServiceAccount -Filter *

# Obtener todas las cuentas de servicio administradas (Managed Service Accounts)
$ManagedServiceAccounts = Get-ADServiceAccount -Filter {ManagedBy -like "*"}

# Mostrar las cuentas de servicio
Write-Host "Service Accounts:"
$ServiceAccounts | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

# Mostrar las cuentas de servicio administradas
Write-Host "Managed Service Accounts:"
$ManagedServiceAccounts | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

=================================================================================================================

Computers accounts with weak encryption type for kerberos
Get-ADComputer -Filter * -Properties msDS-SupportedEncryptionTypes | Where-Object { ($_.msDS-SupportedEncryptionTypes -band 0x2) -eq 0x2 } | Select-Object Name, DistinguishedName

=================================================================================================================
Computers accounts that ar admin accounts
Get-ADComputer -Filter {adminCount -eq 1} | Select-Object Name, DistinguishedName
=================================================================================================================
# Obtener una lista de todas las cuentas de usuario que tienen el atributo "adminCount" configurado
$AdminAccounts = Get-ADUser -Filter {adminCount -eq 1}

# Mostrar la lista de cuentas de administrador
$AdminAccounts | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

=================================================================================================================

Desglosar la propiedad MemberOf de cada cuenta del Active Directory y mostrar el resultado en un Select

# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de usuario
$Usuarios = Get-ADUser -Filter *

# Iterar a través de cada cuenta y desglosar la propiedad MemberOf
$Resultado = $Usuarios | ForEach-Object {
    $Cuenta = $_
    $MemberOf = Get-ADPrincipalGroupMembership $Cuenta

    # Crear un objeto personalizado para cada cuenta
    [PSCustomObject]@{
        Nombre = $Cuenta.Name
        SamAccountName = $Cuenta.SamAccountName
        DistinguishedName = $Cuenta.DistinguishedName
        MemberOf = $MemberOf | Select-Object -ExpandProperty Name -join ', '
    }
}

# Mostrar el resultado en un formato tabular
$Resultado | Select-Object Nombre, SamAccountName, DistinguishedName, MemberOf | Format-Table -AutoSize


=================================================================================================================
# Obtener una lista de todas las cuentas de usuario que son miembros del grupo de administradores
$Administradores = Get-ADGroupMember "Administradores" | Where-Object { $_.objectClass -eq "user" }

$Administradores | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize
=================================================================================================================
Users that have MFA configured

# Instalar el módulo de AzureAD si no está instalado
Install-Module -Name AzureAD -Force -AllowClobber

# Importar el módulo de AzureAD
Import-Module AzureAD

# Conectar a tu cuenta de Azure AD (debes tener permisos para realizar esta operación)
Connect-AzureAD

# Obtener una lista de usuarios con MFA habilitada
$usersWithMFA = Get-AzureADUser -Filter "StrongAuthenticationMethods/IsDefault -eq true"

# Mostrar la lista de usuarios con MFA habilitada
$usersWithMFA | Select-Object DisplayName, UserPrincipalName

=================================================================================================================
Todos los grupos huérfanos (orphan AD groups) en Active Directory, puedes usar PowerShell. Los grupos huérfanos son grupos que no tienen miembros ni pertenecen a ningún otro grupo. 

Get-ADGroup -Filter {Members -notlike '*'} | Select-Object Name, DistinguishedName | Format-Table -AutoSize


=================================================================================================================
Para mostrar las cuentas de aplicaciones (Application Accounts) y las cuentas de usuario (User Accounts) en Active Directory
# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener todas las cuentas de aplicaciones (Application Accounts)
$ApplicationAccounts = Get-ADUser -Filter {msDS-UserDnsDomain -ne $null}

# Obtener todas las cuentas de usuario (User Accounts)
$UserAccounts = Get-ADUser -Filter {msDS-UserDnsDomain -eq $null}

# Mostrar las cuentas de aplicaciones
Write-Host "Cuentas de aplicaciones (Application Accounts):"
$ApplicationAccounts | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

# Mostrar las cuentas de usuario
Write-Host "Cuentas de usuario (User Accounts):"
$UserAccounts | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize

=================================================================================================================
Active Directory es un sistema complejo y extenso con una amplia variedad de propiedades y atributos que se pueden consultar para obtener información sobre usuarios, grupos y recursos. 
A continuación se listan algunas de las propiedades comunes que se pueden obtener desde Active Directory:

Para usuarios:

Nombre de usuario (SamAccountName).
Nombre completo (Name).
Direccion de correo electrónico (EmailAddress).
Número de teléfono (PhoneNumber).
Direccion (StreetAddress).
Ciudad (City).
Estado o Provincia (State).
Código Postal (PostalCode).
País (Country).
Departamento (Department).
Puesto de trabajo (Title).
Unidad Organizativa (OU).
Grupos a los que pertenece (MemberOf).
Última fecha de inicio de sesión (LastLogon).
Fecha de creación (whenCreated).
Fecha de última modificación (whenChanged).


Para grupos:
Nombre del grupo (Name).
Descripción del grupo (Description).
Miembros del grupo (Members).
Miembros directos del grupo (Members).
Propietario del grupo (ManagedBy).
Tipo de grupo (GroupType).


Para recursos compartidos (Shared Folders):
Nombre del recurso compartido (Name).
Ruta del recurso compartido (Path).
Permiso de acceso al recurso compartido (SharePermissions).
Propietario del recurso compartido (Owner).
Tipo de recurso compartido (Type).














=================================================================================================================

Para acceder a datos del Active Directory y guardarlos en una hoja de Excel con Python

import pyad
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import pandas as pd

# Establece la ruta al servidor de Active Directory
pyad.set_defaults(ldap_server="ldap://<tu_servidor_AD>")

# Busca todas las cuentas de usuario
user_objects = pyad.pyad_search()

# Crear un DataFrame de pandas para almacenar los datos
df = pd.DataFrame()

# Itera a través de las cuentas de usuario
for user in user_objects:
    user_dict = user.get_attributes()  # Obtiene todas las propiedades extendidas del usuario
    # Convierte las fechas y objetos en texto
    for key, value in user_dict.items():
        if isinstance(value, pyad.adobjects.ADSysDateTime):
            user_dict[key] = value.strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(value, pyad.adobjects.ADObject):
            user_dict[key] = str(value)
    
    df = df.append(user_dict, ignore_index=True)

# Crear un archivo de Excel y guardar los datos
workbook = Workbook()
worksheet = workbook.active

# Agregar encabezados
headers = list(df.columns)
worksheet.append(headers)

# Agregar los datos del DataFrame al archivo de Excel
for row in dataframe_to_rows(df, index=False, header=False):
    worksheet.append(row)

# Guardar el archivo de Excel
workbook.save("datos_AD.xlsx")
print("Datos del Active Directory guardados en datos_AD.xlsx")







=================================================================================================================



todas las computadoras en el Active Directory, recuperará sus propiedades extendidas, desglosará los grupos a los que pertenecen, formateará las fechas y objetos, y luego guardará todo en un archivo Excel llamado "datos_computadoras_AD.xlsx".






import pyad
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import pandas as pd

# Establece la ruta al servidor de Active Directory
pyad.set_defaults(ldap_server="ldap://<tu_servidor_AD>")

# Busca todas las cuentas de usuario
user_objects = pyad.pyad_search()

# Crear un DataFrame de pandas para almacenar los datos
df = pd.DataFrame()

# Itera a través de las cuentas de usuario
for user in user_objects:
    user_dict = user.get_attributes()  # Obtiene todas las propiedades extendidas del usuario
    # Convierte las fechas y objetos en texto
    for key, value in user_dict.items():
        if isinstance(value, pyad.adobjects.ADSysDateTime):
            user_dict[key] = value.strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(value, pyad.adobjects.ADObject):
            user_dict[key] = str(value)
    
    df = df.append(user_dict, ignore_index=True)

# Crear un archivo de Excel y guardar los datos
workbook = Workbook()
worksheet = workbook.active

# Agregar encabezados
headers = list(df.columns)
worksheet.append(headers)

# Agregar los datos del DataFrame al archivo de Excel
for row in dataframe_to_rows(df, index=False, header=False):
    worksheet.append(row)

# Guardar el archivo de Excel
workbook.save("datos_AD.xlsx")
print("Datos del Active Directory guardados en datos_AD.xlsx")

========================


import pyad
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import pandas as pd

# Establece la ruta base para buscar todas las cuentas de usuario
base_dn = "DC=<tudominio>,DC=com"

# Busca todas las cuentas de usuario en el Active Directory
user_objects = pyad.pyad_search(base_dn=base_dn, query="(objectClass=user)")

# Crear un DataFrame de pandas para almacenar los datos
df = pd.DataFrame()

# Itera a través de las cuentas de usuario
for user in user_objects:
    user_dict = user.get_attributes()  # Obtiene todas las propiedades extendidas del usuario
    # Convierte las fechas y objetos en texto
    for key, value in user_dict.items():
        if isinstance(value, pyad.adobjects.ADSysDateTime):
            user_dict[key] = value.strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(value, pyad.adobjects.ADObject):
            user_dict[key] = str(value)

    # Obtiene los grupos a los que pertenece el usuario
    groups = user.get_member_of()

    # Agrega las propiedades de grupos a la entrada
    user_dict['MemberOf'] = ', '.join([group.dn for group in groups])

    df = df.append(user_dict, ignore_index=True)

# Crear un archivo de Excel y guardar los datos
workbook = Workbook()
worksheet = workbook.active

# Agregar encabezados
headers = list(df.columns)
worksheet.append(headers)

# Agregar los datos del DataFrame al archivo de Excel
for row in dataframe_to_rows(df, index=False, header=False):
    worksheet.append(row)

# Guardar el archivo de Excel
workbook.save("datos_usuarios_AD.xlsx")
print("Datos de usuarios del Active Directory guardados en datos_usuarios_AD.xlsx")






===========================================================================================================



import pyad
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import pandas as pd

# Busca todas las cuentas de usuario en el Active Directory
user_objects = pyad.pyad_search(query="(objectClass=user)")

# Crear un DataFrame de pandas para almacenar los datos
df = pd.DataFrame()

# Itera a través de las cuentas de usuario
for user in user_objects:
    user_dict = user.get_attributes()  # Obtiene todas las propiedades extendidas del usuario
    # Convierte las fechas y objetos en texto
    for key, value in user_dict.items():
        if isinstance(value, pyad.adobjects.ADSysDateTime):
            user_dict[key] = value.strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(value, pyad.adobjects.ADObject):
            user_dict[key] = str(value)

    # Obtiene los grupos a los que pertenece el usuario
    groups = user.get_member_of()

    # Agrega las propiedades de grupos a la entrada
    user_dict['MemberOf'] = ', '.join([group.dn for group in groups])

    df = df.append(user_dict, ignore_index=True)

# Crear un archivo de Excel y guardar los datos
workbook = Workbook()
worksheet = workbook.active

# Agregar encabezados
headers = list(df.columns)
worksheet.append(headers)

# Agregar los datos del DataFrame al archivo de Excel
for row in dataframe_to_rows(df, index=False, header=False):
    worksheet.append(row)

# Guardar el archivo de Excel
workbook.save("datos_usuarios_AD.xlsx")
print("Datos de usuarios del Active Directory guardados en datos_usuarios_AD.xlsx")




=======================================================================================================================

 Listar todos los grupos en Active Directory y mostrar los usuarios que son miembros de cada grupo


# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todos los grupos en Active Directory
$Grupos = Get-ADGroup -Filter *

# Iterar a través de cada grupo y obtener los miembros
$Resultado = @()
foreach ($Grupo in $Grupos) {
    $Miembros = Get-ADGroupMember -Identity $Grupo

    # Crear un objeto personalizado para el grupo y sus miembros
    $ObjetoGrupo = [PSCustomObject]@{
        NombreDelGrupo = $Grupo.Name
        DistinguishedNameDelGrupo = $Grupo.DistinguishedName
        Miembros = $Miembros | Where-Object { $_.objectClass -eq "user" } | Select-Object Name, SamAccountName
    }

    $Resultado += $ObjetoGrupo
}

# Mostrar el resultado en un formato tabular
$Resultado | Format-Table -AutoSize





===========================================================================================

Para obtener todas las propiedades tanto de los miembros de grupos (ADGroupMember) como de los usuarios (ADUser) en Active Directory y establecer una relación entre ellos, puedes realizar un proceso de unión (join) entre las dos entidades. Esto se puede lograr utilizando el cmdlet Get-ADUser para obtener información de usuarios y el cmdlet Get-ADGroupMember para obtener información de los miembros de grupos.

# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todos los grupos en Active Directory
$Grupos = Get-ADGroup -Filter *

# Crear una lista para almacenar el resultado final
$Resultado = @()

# Iterar a través de cada grupo
foreach ($Grupo in $Grupos) {
    $Miembros = Get-ADGroupMember -Identity $Grupo

    # Iterar a través de cada miembro del grupo
    foreach ($Miembro in $Miembros) {
        if ($Miembro.objectClass -eq "user") {
            # Obtener detalles del usuario
            $Usuario = Get-ADUser -Identity $Miembro

            # Crear un objeto personalizado que incluye información del grupo y del usuario
            $ObjetoCombinado = [PSCustomObject]@{
                Grupo = $Grupo.Name
                DistinguishedNameDelGrupo = $Grupo.DistinguishedName
                NombreDelUsuario = $Usuario.Name
                SamAccountName = $Usuario.SamAccountName
                DistinguishedNameDelUsuario = $Usuario.DistinguishedName
                # Agregar más propiedades de usuario según sea necesario
            }

            # Agregar el objeto combinado al resultado
            $Resultado += $ObjetoCombinado
        }
    }
}

# Mostrar el resultado en un formato tabular
$Resultado | Format-Table -AutoSize





=================================================================================================


Para obtener todas las propiedades tanto de los miembros de grupos (ADGroupMember) como de las computadoras (ADComputer) en Active Directory y 
establecer una relación entre ellos, puedes realizar un proceso de unión (join) entre las dos entidades. 
Esto se puede lograr utilizando el cmdlet Get-ADComputer para obtener información de las computadoras y el cmdlet Get-ADGroupMember para obtener información de los miembros de grupos.


# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todos los grupos en Active Directory
$Grupos = Get-ADGroup -Filter *

# Crear una lista para almacenar el resultado final
$Resultado = @()

# Iterar a través de cada grupo
foreach ($Grupo in $Grupos) {
    $Miembros = Get-ADGroupMember -Identity $Grupo

    # Iterar a través de cada miembro del grupo
    foreach ($Miembro in $Miembros) {
        if ($Miembro.objectClass -eq "computer") {
            # Obtener detalles de la computadora
            $Computadora = Get-ADComputer -Identity $Miembro

            # Crear un objeto personalizado que incluye información del grupo y de la computadora
            $ObjetoCombinado = [PSCustomObject]@{
                Grupo = $Grupo.Name
                DistinguishedNameDelGrupo = $Grupo.DistinguishedName
                NombreDeLaComputadora = $Computadora.Name
                DNSHostName = $Computadora.DNSHostName
                DistinguishedNameDeLaComputadora = $Computadora.DistinguishedName
                # Agregar más propiedades de computadora según sea necesario
            }

            # Agregar el objeto combinado al resultado
            $Resultado += $ObjetoCombinado
        }
    }
}

# Mostrar el resultado en un formato tabular
$Resultado | Format-Table -AutoSize















===============================================================================================================




Para listar todas las cuentas de servicio y mostrar todas sus propiedades en Active Directory.

# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de servicio
$CuentasDeServicio = Get-ADServiceAccount -Filter *

# Mostrar todas las propiedades de las cuentas de servicio
$CuentasDeServicio | Format-Table -Property * -AutoSize








===================================================================================================================



Para listar todas las cuentas de aplicación en Active Directory que tengan configurada una política de contraseña (Password Policy)

# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de aplicación
$CuentasDeAplicacion = Get-ADUser -Filter {ServicePrincipalName -like '*'} -Properties PasswordLastSet, PasswordNeverExpires, PasswordExpired, "msDS-UserPasswordExpiryTimeComputed"

# Filtrar las cuentas de aplicación con configuración de contraseña
$CuentasConPoliticaDePassword = $CuentasDeAplicacion | Where-Object {
    $_.PasswordLastSet -ne $null -or $_.PasswordNeverExpires -eq $false -or $_.PasswordExpired -eq $true -or $_."msDS-UserPasswordExpiryTimeComputed" -ne $null
}

# Mostrar las cuentas de aplicación con configuración de contraseña
$CuentasConPoliticaDePassword | Select-Object Name, SamAccountName, DistinguishedName | Format-Table -AutoSize




===================================================================================================================
Para identificar cuentas de usuario duplicadas o con múltiples IDs en Active Directory. 
Por ejemplo, es común buscar duplicados basados en el campo SamAccountName, que es el nombre de cuenta de usuario único. 
Aquí tienes un script que muestra las cuentas de usuario con el mismo SamAccountName:


# Importar el módulo de Active Directory
Import-Module ActiveDirectory

# Obtener una lista de todas las cuentas de usuario
$Usuarios = Get-ADUser -Filter *

# Crear un diccionario para almacenar las cuentas duplicadas
$Duplicados = @{}

# Iterar a través de cada cuenta de usuario
foreach ($Usuario in $Usuarios) {
    $SamAccountName = $Usuario.SamAccountName

    # Verificar si el nombre de cuenta ya existe en el diccionario
    if ($Duplicados.ContainsKey($SamAccountName)) {
        $Duplicados[$SamAccountName] += @($Usuario)
    } else {
        $Duplicados[$SamAccountName] = @($Usuario)
    }
}

# Filtrar y mostrar las cuentas duplicadas
$CuentasDuplicadas = $Duplicados.Values | Where-Object { $_.Count -gt 1 }

# Mostrar la lista de cuentas de usuario duplicadas
$CuentasDuplicadas | ForEach-Object { $_ | Select-Object SamAccountName, Name, DistinguishedName } | Format-Table -AutoSize

===================================================================================================================

Usuarios con todos sus grupos
Get-ADUser -Filter * | ForEach-Object { $Usuario = $_; Get-ADPrincipalGroupMembership $Usuario | ForEach-Object { $Grupo = $_; "$($Usuario.Name), $($Grupo.Name)" } }

===================================================================================================================

===================================================================================================================

===================================================================================================================

===================================================================================================================
# Define las credenciales
$clientId     = "TuClientID"       # Reemplaza con tu propio Client ID
$clientSecret = "TuClientSecret"   # Reemplaza con tu propio Client Secret
$tenantId     = "TuTenantID"       # Reemplaza con tu propio Tenant ID

# Crear un objeto SecureString para el secreto del cliente
$secureClientSecret = ConvertTo-SecureString -String $clientSecret -AsPlainText -Force

# Crear un objeto de credenciales
$credential = New-Object -TypeName PSCredential -ArgumentList $clientId, $secureClientSecret

# Autenticarse en Azure
Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId $tenantId

# Obtener todos los usuarios con MFA habilitada
$usersWithMFA = Get-AzureADUser -All $true | Where-Object { $_.StrongAuthenticationMethods.Count -gt 0 }

# Mostrar información sobre los usuarios con MFA (UserPrincipalName, DisplayName, ObjectId, CreatedDateTime)
$usersWithMFA | Select-Object UserPrincipalName, DisplayName, ObjectId, CreatedDateTime

# Puedes exportar la información a un archivo CSV si lo deseas
$usersWithMFA | Select-Object UserPrincipalName, DisplayName, ObjectId, CreatedDateTime | Export-Csv -Path "C:\Ruta\Hacia\Tu\Archivo\UsuariosMFA.csv" -NoTypeInformation






=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================



# Define las credenciales
$clientId     = "TuClientID"       # Reemplaza con tu propio Client ID
$clientSecret = "TuClientSecret"   # Reemplaza con tu propio Client Secret
$tenantId     = "TuTenantID"       # Reemplaza con tu propio Tenant ID

# Crear un objeto SecureString para el secreto del cliente
$secureClientSecret = ConvertTo-SecureString -String $clientSecret -AsPlainText -Force

# Crear un objeto de credenciales
$credential = New-Object -TypeName PSCredential -ArgumentList $clientId, $secureClientSecret

# Autenticarse en Azure
Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId $tenantId

# Definir el rango de fechas para la búsqueda de eventos
$startDate = (Get-Date).AddDays(-30)  # Fecha de inicio (30 días atrás)

# Obtener eventos de "successful MFA challenge"
$auditEvents = Get-AzureADAuditSignInLogs -Filter "ResultType eq 'Success' and ResourceDisplayName eq 'Authentication' and OperationType eq 'Interactive' and ClientAppUsed eq 'Other' and Status eq 'Success' and UserResult eq 'MFA challenge satisfied'" -StartDate $startDate

# Mostrar información sobre los eventos 
$auditEvents | Select-Object UserPrincipalName, UserDisplayName, ClientAppUsed, ResourceDisplayName, OperationType, ResultType, EventDateTime

$auditEvents | Select-Object UserPrincipalName, UserDisplayName, ClientAppUsed, ResourceDisplayName, OperationType, ResultType, EventDateTime | Export-Csv -Path "C:\Ruta\Hacia\Tu\Archivo\SuccessfulMFAEvents.csv" -NoTypeInformation





=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
# Define las credenciales
$clientId     = "TuClientID"       # Reemplaza con tu propio Client ID
$clientSecret = "TuClientSecret"   # Reemplaza con tu propio Client Secret
$tenantId     = "TuTenantID"       # Reemplaza con tu propio Tenant ID

# Crear un objeto SecureString para el secreto del cliente
$secureClientSecret = ConvertTo-SecureString -String $clientSecret -AsPlainText -Force

# Crear un objeto de credenciales
$credential = New-Object -TypeName PSCredential -ArgumentList $clientId, $secureClientSecret

# Autenticarse en Azure
Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId $tenantId

# Obtener la lista de aplicaciones integradas con SSO
$integratedApps = Get-AzADServicePrincipal -Filter "AppRolesAssigned/any()" | Select-Object DisplayName, AppRolesAssigned

# Mostrar información sobre las aplicaciones (puedes personalizar según tus necesidades)
$integratedApps | Format-Table -AutoSize

# Puedes exportar la información a un archivo CSV si lo deseas
$integratedApps | Export-Csv -Path "C:\Ruta\Hacia\Tu\Archivo\AplicacionesIntegradasSSO.csv" -NoTypeInformation






=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================

# Instalar el módulo Microsoft.Graph si no lo has hecho
Install-Module -Name Microsoft.Graph -Force -AllowClobber -Scope CurrentUser

# Importar el módulo
Import-Module Microsoft.Graph

# Definir credenciales y conectarse a Azure AD
$clientId       = "TuClientID"
$clientSecret   = "TuClientSecret"
$tenantId       = "TuTenantID"
$securePassword = ConvertTo-SecureString $clientSecret -AsPlainText -Force
$credential     = New-Object PSCredential -ArgumentList $clientId, $securePassword

Connect-MgGraph -ClientID $clientId -ClientSecret $credential.Password -TenantId $tenantId

# Obtener eventos de riesgo (puede incluir eventos de autenticación basados en riesgos)
$riskEvents = Get-MgRiskDetection -Filter "state eq 'active'"

# Mostrar información sobre los eventos de riesgo
$riskEvents | Format-Table -AutoSize






=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================

# Instalar el módulo Microsoft.Graph si no lo has hecho
Install-Module -Name Microsoft.Graph -Force -AllowClobber -Scope CurrentUser

# Importar el módulo
Import-Module Microsoft.Graph

# Definir credenciales y conectarse a Azure AD
$clientId       = "TuClientID"
$clientSecret   = "TuClientSecret"
$tenantId       = "TuTenantID"
$securePassword = ConvertTo-SecureString $clientSecret -AsPlainText -Force
$credential     = New-Object PSCredential -ArgumentList $clientId, $securePassword

Connect-MgGraph -ClientID $clientId -ClientSecret $credential.Password -TenantId $tenantId

# Obtener eventos de intentos de autenticación fallidos
$failedAuthEvents = Get-MgSignIn -Filter "status eq 'failure'"

# Mostrar información sobre los eventos de autenticación fallidos
$failedAuthEvents | Format-Table -AutoSize





=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================

# Instalar el módulo Microsoft.Graph si no lo has hecho
Install-Module -Name Microsoft.Graph -Force -AllowClobber -Scope CurrentUser

# Importar el módulo
Import-Module Microsoft.Graph

# Definir credenciales y conectarse a Azure AD
$clientId       = "TuClientID"
$clientSecret   = "TuClientSecret"
$tenantId       = "TuTenantID"
$securePassword = ConvertTo-SecureString $clientSecret -AsPlainText -Force
$credential     = New-Object PSCredential -ArgumentList $clientId, $securePassword

Connect-MgGraph -ClientID $clientId -ClientSecret $credential.Password -TenantId $tenantId

# Obtener la lista de aplicaciones en Azure AD
$applications = Get-MgServicePrincipal

# Filtrar aplicaciones que no tienen MFA configurada
$appsWithoutMFA = $applications | Where-Object { $_.StrongAuthenticationMethods.Count -eq 0 }

# Mostrar información sobre las aplicaciones sin MFA
$appsWithoutMFA | Format-Table -AutoSize






=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================











